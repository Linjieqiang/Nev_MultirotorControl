<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\MultirotorF4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\MultirotorF4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Wed Apr 10 21:33:20 2013
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; loop &rArr; Baro_update &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[86]">cliCMix</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">cliCMix</a><BR>
 <LI><a href="#[121]">i2a</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">i2a</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[5a]">CRYP_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from drv_bmp085.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from drv_hcsr04.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from drv_hcsr04.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3b]">FSMC_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[80]">GPS_NewData</a> from gps.o(.text) referenced from gps.o(.text)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from main.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from drv_i2c.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from drv_i2c.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from drv_i2c.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from drv_i2c.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from drv_system.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx_md.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from drv_pwm.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from drv_pwm.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from drv_pwm.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from drv_pwm.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from drv_pwm.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from drv_pwm.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from drv_uart.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from drv_uart.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f4xx_md.o(.text) referenced from startup_stm32f4xx_md.o(RESET)
 <LI><a href="#[5f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx_md.o(.text)
 <LI><a href="#[81]">_putc</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[62]">adxl345Align</a> from drv_adxl345.o(.text) referenced from drv_adxl345.o(.text)
 <LI><a href="#[60]">adxl345Init</a> from drv_adxl345.o(.text) referenced from drv_adxl345.o(.text)
 <LI><a href="#[61]">adxl345Read</a> from drv_adxl345.o(.text) referenced from drv_adxl345.o(.text)
 <LI><a href="#[67]">bmp085_calculate</a> from drv_bmp085.o(.text) referenced from drv_bmp085.o(.text)
 <LI><a href="#[66]">bmp085_get_up</a> from drv_bmp085.o(.text) referenced from drv_bmp085.o(.text)
 <LI><a href="#[64]">bmp085_get_ut</a> from drv_bmp085.o(.text) referenced from drv_bmp085.o(.text)
 <LI><a href="#[65]">bmp085_start_up</a> from drv_bmp085.o(.text) referenced from drv_bmp085.o(.text)
 <LI><a href="#[63]">bmp085_start_ut</a> from drv_bmp085.o(.text) referenced from drv_bmp085.o(.text)
 <LI><a href="#[85]">cliAux</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[86]">cliCMix</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[7f]">cliCompare</a> from cli.o(.text) referenced from cli.o(.text)
 <LI><a href="#[87]">cliDefaults</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[88]">cliDump</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[89]">cliExit</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[8a]">cliFeature</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[8b]">cliHelp</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[8c]">cliMap</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[8d]">cliMixer</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[8e]">cliSave</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[8f]">cliSet</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[90]">cliStatus</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[91]">cliVersion</a> from cli.o(.text) referenced from cli.o(.constdata)
 <LI><a href="#[6a]">l3g4200dAlign</a> from drv_l3g4200d.o(.text) referenced from drv_l3g4200d.o(.text)
 <LI><a href="#[68]">l3g4200dInit</a> from drv_l3g4200d.o(.text) referenced from drv_l3g4200d.o(.text)
 <LI><a href="#[69]">l3g4200dRead</a> from drv_l3g4200d.o(.text) referenced from drv_l3g4200d.o(.text)
 <LI><a href="#[5d]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[6d]">mma8452Align</a> from drv_mma845x.o(.text) referenced from drv_mma845x.o(.text)
 <LI><a href="#[6b]">mma8452Init</a> from drv_mma845x.o(.text) referenced from drv_mma845x.o(.text)
 <LI><a href="#[6c]">mma8452Read</a> from drv_mma845x.o(.text) referenced from drv_mma845x.o(.text)
 <LI><a href="#[70]">mpu3050Align</a> from drv_mpu3050.o(.text) referenced from drv_mpu3050.o(.text)
 <LI><a href="#[6e]">mpu3050Init</a> from drv_mpu3050.o(.text) referenced from drv_mpu3050.o(.text)
 <LI><a href="#[6f]">mpu3050Read</a> from drv_mpu3050.o(.text) referenced from drv_mpu3050.o(.text)
 <LI><a href="#[71]">mpu3050ReadTemp</a> from drv_mpu3050.o(.text) referenced from drv_mpu3050.o(.text)
 <LI><a href="#[74]">mpu6050AccAlign</a> from drv_mpu6050.o(.text) referenced from drv_mpu6050.o(.text)
 <LI><a href="#[72]">mpu6050AccInit</a> from drv_mpu6050.o(.text) referenced from drv_mpu6050.o(.text)
 <LI><a href="#[73]">mpu6050AccRead</a> from drv_mpu6050.o(.text) referenced from drv_mpu6050.o(.text)
 <LI><a href="#[77]">mpu6050GyroAlign</a> from drv_mpu6050.o(.text) referenced from drv_mpu6050.o(.text)
 <LI><a href="#[75]">mpu6050GyroInit</a> from drv_mpu6050.o(.text) referenced from drv_mpu6050.o(.text)
 <LI><a href="#[76]">mpu6050GyroRead</a> from drv_mpu6050.o(.text) referenced from drv_mpu6050.o(.text)
 <LI><a href="#[7c]">ms5611_calculate</a> from drv_ms5611.o(.text) referenced from drv_ms5611.o(.text)
 <LI><a href="#[7b]">ms5611_get_up</a> from drv_ms5611.o(.text) referenced from drv_ms5611.o(.text)
 <LI><a href="#[79]">ms5611_get_ut</a> from drv_ms5611.o(.text) referenced from drv_ms5611.o(.text)
 <LI><a href="#[7a]">ms5611_start_up</a> from drv_ms5611.o(.text) referenced from drv_ms5611.o(.text)
 <LI><a href="#[78]">ms5611_start_ut</a> from drv_ms5611.o(.text) referenced from drv_ms5611.o(.text)
 <LI><a href="#[7d]">ppmCallback</a> from drv_pwm.o(.text) referenced from drv_pwm.o(.text)
 <LI><a href="#[7e]">pwmCallback</a> from drv_pwm.o(.text) referenced from drv_pwm.o(.text)
 <LI><a href="#[82]">pwmReadRawRC</a> from mw.o(.text) referenced from main.o(.text)
 <LI><a href="#[84]">spektrumDataReceive</a> from spektrum.o(.text) referenced from spektrum.o(.text)
 <LI><a href="#[83]">spektrumReadRawRC</a> from spektrum.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(.text)
</UL>
<P><STRONG><a name="[21b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[92]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[21c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[21d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[d4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[bd]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
</UL>

<P><STRONG><a name="[95]"></a>ADC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[af]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[ae]"></a>ADC_CommonInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[b2]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[b1]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[b3]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[b0]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[aa]"></a>DMA_DeInit</STRONG> (Thumb, 270 bytes, Stack size 28 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[ab]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[ac]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxDMA
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[10f]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartAvailable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[110]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[bc]"></a>EXTI_Init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
</UL>

<P><STRONG><a name="[b7]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_EXTI_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
</UL>

<P><STRONG><a name="[147]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
</UL>

<P><STRONG><a name="[98]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[97]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[99]"></a>FLASH_EraseSector</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
</UL>

<P><STRONG><a name="[9a]"></a>FLASH_ProgramWord</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
</UL>

<P><STRONG><a name="[146]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmGPIOConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050GyroInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8452Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cUnstick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmGPIOConfig
</UL>

<P><STRONG><a name="[c1]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cUnstick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cUnstick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_get_distance
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cUnstick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_get_distance
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmGPIOConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[9b]"></a>I2C_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[9d]"></a>I2C_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[d1]"></a>I2C_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[d3]"></a>I2C_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[db]"></a>I2C_GenerateSTART</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteBuffer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[d6]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_er_handler
</UL>

<P><STRONG><a name="[d9]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
</UL>

<P><STRONG><a name="[d8]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
</UL>

<P><STRONG><a name="[dc]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
</UL>

<P><STRONG><a name="[da]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
</UL>

<P><STRONG><a name="[d2]"></a>I2C_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteBuffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_er_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[9e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a8]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[10a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a9]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[9c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[96]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[10b]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[bb]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
</UL>

<P><STRONG><a name="[ec]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmTimeBase
</UL>

<P><STRONG><a name="[eb]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmTimeBase
</UL>

<P><STRONG><a name="[f2]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOutConfig
</UL>

<P><STRONG><a name="[100]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[102]"></a>TIM_OC2Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[104]"></a>TIM_OC3Init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[fe]"></a>TIM_OC4Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[fd]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[101]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[103]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[105]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[ff]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
</UL>

<P><STRONG><a name="[a0]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a5]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a4]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a2]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[9f]"></a>TIM_ICInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmICConfig
</UL>

<P><STRONG><a name="[106]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmICConfig
</UL>

<P><STRONG><a name="[f9]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOutConfig
</UL>

<P><STRONG><a name="[f5]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
</UL>

<P><STRONG><a name="[f6]"></a>TIM_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Open
</UL>

<P><STRONG><a name="[116]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Open
</UL>

<P><STRONG><a name="[111]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Open
</UL>

<P><STRONG><a name="[11b]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[118]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
</UL>

<P><STRONG><a name="[a7]"></a>adcInit</STRONG> (Thumb, 254 bytes, Stack size 136 bytes, drv_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = adcInit &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>adcGetChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
</UL>

<P><STRONG><a name="[b6]"></a>adxl345Detect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_adxl345.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = adxl345Detect &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>bmp085Detect</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = bmp085Detect &rArr; bmp085_get_cal_param &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_get_cal_param
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[c0]"></a>ECHO_EXTI_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_hcsr04.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ECHO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_hcsr04.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler &rArr; ECHO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_hcsr04.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ECHO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>hcsr04_init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, drv_hcsr04.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hcsr04_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonar_init
</UL>

<P><STRONG><a name="[c5]"></a>hcsr04_get_distance</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_hcsr04.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hcsr04_get_distance &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonar_update
</UL>

<P><STRONG><a name="[c9]"></a>hmc5883lDetect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_hmc5883l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hmc5883lDetect &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[ca]"></a>hmc5883lInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_hmc5883l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = hmc5883lInit &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_init
</UL>

<P><STRONG><a name="[cb]"></a>hmc5883lCal</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_hmc5883l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = hmc5883lCal &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_init
</UL>

<P><STRONG><a name="[cc]"></a>hmc5883lFinishCal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_hmc5883l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = hmc5883lFinishCal &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_init
</UL>

<P><STRONG><a name="[cd]"></a>hmc5883lRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_hmc5883l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = hmc5883lRead &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getRawADC
</UL>

<P><STRONG><a name="[ce]"></a>i2cInit</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cUnstick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteBuffer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_er_handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2C1_ER_IRQHandler &rArr; i2c_er_handler &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_er_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_EV_IRQHandler &rArr; i2c_ev_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2C2_ER_IRQHandler &rArr; i2c_er_handler &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_er_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_EV_IRQHandler &rArr; i2c_ev_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ev_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>i2cWriteBuffer</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledringBlink
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledringState
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>

<P><STRONG><a name="[b5]"></a>i2cWrite</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_start_ut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_start_up
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050GyroInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Detect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8452Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lFinishCal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lCal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_start_ut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_start_up
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345Init
</UL>

<P><STRONG><a name="[b4]"></a>i2cRead</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_read_adc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050Detect
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050AccRead
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050GyroRead
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050ReadTemp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8452Detect
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8452Read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dDetect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lRead
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lDetect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_get_cal_param
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_get_ut
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_get_up
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345Detect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345Read
</UL>

<P><STRONG><a name="[13e]"></a>i2cGetErrorCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliStatus
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[df]"></a>l3g4200dDetect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_l3g4200d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = l3g4200dDetect &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[e0]"></a>l3g4200dConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, drv_l3g4200d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = l3g4200dConfig &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[e1]"></a>ledringState</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, drv_ledring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ledringState &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
</UL>

<P><STRONG><a name="[e2]"></a>ledringBlink</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_ledring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ledringBlink &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[e3]"></a>mma8452Detect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mma8452Detect &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[e4]"></a>mpu3050Detect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_mpu3050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mpu3050Detect &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[e5]"></a>mpu3050Config</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drv_mpu3050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mpu3050Config &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[e6]"></a>mpu6050Detect</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mpu6050Detect &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failureMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[e8]"></a>ms5611Detect</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ms5611Detect &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_crc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_CC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_CC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>pwmInit</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pwmInit &rArr; pwmInConfig &rArr; pwmICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOutConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>pwmWriteMotor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMotors
</UL>

<P><STRONG><a name="[18b]"></a>pwmWriteServo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixTable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServos
</UL>

<P><STRONG><a name="[194]"></a>pwmRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmReadRawRC
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_system.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>micros</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, drv_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHO_EXTI_IRQHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spektrumDataReceive
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[c4]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliStatus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_code
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_get_distance
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
</UL>

<P><STRONG><a name="[c7]"></a>delayMicroseconds</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, drv_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cUnstick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_get_distance
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[be]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsPrint
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSave
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDefaults
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050Detect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050GyroInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Detect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failureMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dDetect
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lCal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_init
</UL>

<P><STRONG><a name="[108]"></a>systemInit</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, drv_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = systemInit &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>failureMode</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drv_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = failureMode &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050Detect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[133]"></a>systemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSave
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDefaults
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
</UL>

<P><STRONG><a name="[10d]"></a>uartInit</STRONG> (Thumb, 318 bytes, Stack size 120 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = uartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
</UL>

<P><STRONG><a name="[112]"></a>uartAvailable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
</UL>

<P><STRONG><a name="[19f]"></a>uartTransmitEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>

<P><STRONG><a name="[141]"></a>uartRead</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
</UL>

<P><STRONG><a name="[113]"></a>uartWrite</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataHead
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeFrsky
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize8
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize16
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize32
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_putc
</UL>

<P><STRONG><a name="[114]"></a>uartPrint</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliPrompt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliVersion
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMixer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMap
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliHelp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliExit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSave
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDump
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDefaults
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
</UL>

<P><STRONG><a name="[117]"></a>uart2Init</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uart2Init &rArr; uart2Open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spektrumInit
</UL>

<P><STRONG><a name="[119]"></a>uart2ChangeBaud</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart2ChangeBaud &rArr; uart2Open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Open
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
</UL>

<P><STRONG><a name="[11a]"></a>uart2Write</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsPrint
</UL>

<P><STRONG><a name="[14c]"></a>uart2TransmitEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsPrint
</UL>

<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>buzzer</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buzzer &rArr; beep_code &rArr; beep
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_code
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
</UL>

<P><STRONG><a name="[122]"></a>itoa</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = itoa &rArr; i2a &rArr;  i2a (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[13f]"></a>cliProcess</STRONG> (Thumb, 1042 bytes, Stack size 56 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cliProcess &rArr; cliExit &rArr; cliSave &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliPrompt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliExit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartAvailable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
</UL>

<P><STRONG><a name="[13b]"></a>parseRcChannels</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = parseRcChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetConf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMap
</UL>

<P><STRONG><a name="[143]"></a>readEEPROM</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readEEPROM
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>writeParams</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetConf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Common
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getADC
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[139]"></a>setFeature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetConf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
</UL>

<P><STRONG><a name="[132]"></a>checkFirstTime</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = checkFirstTime &rArr; resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetConf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDefaults
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>getSensors</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>

<P><STRONG><a name="[167]"></a>setSensors</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonar_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>clearSensors</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
</UL>

<P><STRONG><a name="[13d]"></a>sensorsMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliStatus
</UL>

<P><STRONG><a name="[11f]"></a>getFeature</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Common
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixTable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
</UL>

<P><STRONG><a name="[138]"></a>featureClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
</UL>

<P><STRONG><a name="[135]"></a>featureMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDump
</UL>

<P><STRONG><a name="[14e]"></a>wrap_18000</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[15a]"></a>GPS_reset_home_position</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPS_reset_home_position &rArr; GPS_calc_longitude_scaling &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[15d]"></a>GPS_coord_to_degrees</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPS_coord_to_degrees
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>

<P><STRONG><a name="[165]"></a>gpsInit</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = gpsInit &rArr; uart2Init &rArr; uart2Open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_set_pids
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsPrint
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensors
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ChangeBaud
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>GPS_reset_nav</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPS_reset_nav
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_PID
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[16a]"></a>GPS_set_next_wp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPS_set_next_wp &rArr; GPS_distance_cm_bearing &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_location_error
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[16b]"></a>imuInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = imuInit &rArr; Mag_init &rArr; hmc5883lInit &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>rotateV</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rotateV &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[171]"></a>applyDeadband16</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAltitude
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[16e]"></a>integratorStep</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = integratorStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accIntegratorStep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyDeadband16
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateV
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
</UL>

<P><STRONG><a name="[175]"></a>computeIMU</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = computeIMU &rArr; annexCode &rArr; serialCom &rArr; evaluateCommand &rArr; checkFirstTime &rArr; resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_getADC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_getADC
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[17b]"></a>applyDeadbandFloat</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAltitude
</UL>

<P><STRONG><a name="[17a]"></a>InvSqrt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAltitude
</UL>

<P><STRONG><a name="[21e]"></a>isq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>getEstimatedAltitude</STRONG> (Thumb, 772 bytes, Stack size 20 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getEstimatedAltitude
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyDeadbandFloat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyDeadband16
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[17f]"></a>initKalman1D</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, kalman1d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
</UL>

<P><STRONG><a name="[17d]"></a>kalman1DUpdate32</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, kalman1d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1DUpdate
</UL>

<P><STRONG><a name="[17c]"></a>kalman1DUpdate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kalman1d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kalman1DUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1DUpdate32
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
</UL>

<P><STRONG><a name="[17e]"></a>accelKalmanfilterStep</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, kalmanfilterfrontend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = accelKalmanfilterStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1DUpdate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKalman1D
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_getADC
</UL>

<P><STRONG><a name="[180]"></a>gyroKalmanfilterStep</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, kalmanfilterfrontend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gyroKalmanfilterStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1DUpdate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initKalman1D
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_getADC
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; loop &rArr; Baro_update &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensors
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spektrumInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsAutodetect
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_printf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonar_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler &rArr; writeAllMotors &rArr; writeMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAllMotors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx_md.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>mixerInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mixerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>mixerLoadMix</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mixerLoadMix
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
</UL>

<P><STRONG><a name="[18a]"></a>writeServos</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeServos
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWriteServo
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[18c]"></a>writeMotors</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWriteMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAllMotors
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[189]"></a>writeAllMotors</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeAllMotors &rArr; writeMotors
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMotors
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[18e]"></a>mixTable</STRONG> (Thumb, 1120 bytes, Stack size 40 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mixTable &rArr; airplaneMixer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWriteServo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airplaneMixer
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[148]"></a>blinkLED</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, mw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GYRO_Common
</UL>

<P><STRONG><a name="[178]"></a>annexCode</STRONG> (Thumb, 894 bytes, Stack size 48 bytes, mw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = annexCode &rArr; serialCom &rArr; evaluateCommand &rArr; checkFirstTime &rArr; resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledringState
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetChannel
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTelemetry
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryAdcToVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
</UL>

<P><STRONG><a name="[82]"></a>pwmReadRawRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwmReadRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>computeRC</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = computeRC
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[188]"></a>loop</STRONG> (Thumb, 2820 bytes, Stack size 72 bytes, mw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = loop &rArr; Baro_update &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_set_next_wp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_nav
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_home_position
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_18000
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledringBlink
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spektrumFrameComplete
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetIntegrator
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonar_update
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getADC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Baro_update
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeRC
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixTable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMotors
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServos
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAltitude
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>tfp_format</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchw
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui2a
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uli2a
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>

<P><STRONG><a name="[181]"></a>init_printf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>tfp_printf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTransmitEmpty
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMixer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMap
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliHelp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDump
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliPrintVar
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliAux
</UL>

<P><STRONG><a name="[186]"></a>sensorsAutodetect</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sensorsAutodetect &rArr; bmp085Detect &rArr; bmp085_get_cal_param &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSensors
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050Detect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu3050Detect
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8452Detect
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failureMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l3g4200dDetect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lDetect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>batteryAdcToVoltage</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
</UL>

<P><STRONG><a name="[187]"></a>batteryInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = batteryInit &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetChannel
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryAdcToVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>ACC_getADC</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ACC_getADC &rArr; ACC_Common &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Common
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
</UL>

<P><STRONG><a name="[199]"></a>Baro_update</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Baro_update &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[177]"></a>Gyro_getADC</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Gyro_getADC &rArr; gyroKalmanfilterStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GYRO_Common
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
</UL>

<P><STRONG><a name="[16c]"></a>Mag_init</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Mag_init &rArr; hmc5883lInit &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lFinishCal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lCal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getRawADC
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit
</UL>

<P><STRONG><a name="[198]"></a>Mag_getADC</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Mag_getADC &rArr; Mag_getRawADC &rArr; hmc5883lRead &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getRawADC
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[185]"></a>Sonar_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sonar_init &rArr; hcsr04_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensors
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>Sonar_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sonar_update &rArr; hcsr04_get_distance &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hcsr04_get_distance
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[1a8]"></a>serialize32</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialize32
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1a9]"></a>serialize16</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialize16
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1aa]"></a>serialize8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serialize8
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeNames
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tailSerialReply
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialResponse
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1ac]"></a>read8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read16
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1ab]"></a>read16</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read32
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1ad]"></a>read32</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read32 &rArr; read16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1ae]"></a>headSerialResponse</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = headSerialResponse &rArr; serialize8
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialReply
</UL>

<P><STRONG><a name="[1af]"></a>headSerialReply</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = headSerialReply &rArr; headSerialResponse &rArr; serialize8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1b0]"></a>headSerialError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = headSerialError &rArr; headSerialResponse &rArr; serialize8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1b1]"></a>tailSerialReply</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tailSerialReply &rArr; serialize8
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[1b2]"></a>serializeNames</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serializeNames &rArr; serialize8
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>

<P><STRONG><a name="[182]"></a>serialInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = serialInit &rArr; uartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTelemetry
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>serialCom</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = serialCom &rArr; evaluateCommand &rArr; checkFirstTime &rArr; resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRead
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartAvailable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemReset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluateCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
</UL>

<P><STRONG><a name="[197]"></a>resetIntegrator</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, simpleintegrator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Common
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[172]"></a>accIntegratorStep</STRONG> (Thumb, 266 bytes, Stack size 28 bytes, simpleintegrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = accIntegratorStep
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[184]"></a>spektrumInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spektrum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = spektrumInit &rArr; uart2Init &rArr; uart2Open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>spektrumFrameComplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spektrum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[83]"></a>spektrumReadRawRC</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, spektrum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spektrumReadRawRC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[192]"></a>initTelemetry</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = initTelemetry &rArr; serialInit &rArr; uartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
</UL>

<P><STRONG><a name="[1b4]"></a>sendTelemetry</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendTelemetry &rArr; sendGPS &rArr; serialize16 &rArr; serializeFrsky
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltage
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize16
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataHead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPS
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
</UL>

<P><STRONG><a name="[15e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_coord_to_degrees
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[13a]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMap
</UL>

<P><STRONG><a name="[142]"></a>bsearch</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readEEPROM
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliExit
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetConf
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12b]"></a>strcat</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[13c]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
</UL>

<P><STRONG><a name="[12c]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[12f]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRcChannels
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMap
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliAux
</UL>

<P><STRONG><a name="[12a]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMixer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMap
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliAux
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCompare
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[12d]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliMixer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliFeature
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCompare
</UL>

<P><STRONG><a name="[12e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliAux
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_dadd</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Baro_update
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Baro_update
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Baro_update
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_f2d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Baro_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroKalmanfilterStep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelKalmanfilterStep
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[224]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[225]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[226]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[1be]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[227]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[228]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c1]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1d4]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[229]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[93]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[22a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1c9]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1c8]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[22b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ca]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[22d]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[174]"></a>__hardfp_asinf</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
</UL>

<P><STRONG><a name="[158]"></a>__hardfp_atan2f</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
</UL>

<P><STRONG><a name="[151]"></a>__hardfp_cosf</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_longitude_scaling
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateV
</UL>

<P><STRONG><a name="[1a3]"></a>__hardfp_pow</STRONG> (Thumb, 3148 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Baro_update
</UL>

<P><STRONG><a name="[14f]"></a>__hardfp_sinf</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;annexCode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateV
</UL>

<P><STRONG><a name="[157]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEstimatedAttitude
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GYRO_Common
</UL>

<P><STRONG><a name="[1d2]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d1]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1cb]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1ce]"></a>__mathlib_rredf2</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[22e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[230]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1cc]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1d0]"></a>fabs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1cf]"></a>sqrt</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1cd]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>SetSysClock</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a3]"></a>TI2_Config</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a1]"></a>TI1_Config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[62]"></a>adxl345Align</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_adxl345.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_adxl345.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>adxl345Read</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, drv_adxl345.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = adxl345Read &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adxl345.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>adxl345Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, drv_adxl345.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = adxl345Init &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adxl345.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>bmp085_calculate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmp085_calculate &rArr; bmp085_get_pressure
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_get_pressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_bmp085.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>bmp085_get_up</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bmp085_get_up &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_bmp085.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>bmp085_start_up</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmp085_start_up &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_bmp085.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>bmp085_get_ut</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bmp085_get_ut &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_bmp085.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>bmp085_start_ut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmp085_start_ut &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_bmp085.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>bmp085_get_pressure</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmp085_get_pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085_calculate
</UL>

<P><STRONG><a name="[bf]"></a>bmp085_get_cal_param</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, drv_bmp085.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmp085_get_cal_param &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp085Detect
</UL>

<P><STRONG><a name="[d5]"></a>i2c_er_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2c_er_handler &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>i2c_ev_handler</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_ev_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>i2cUnstick</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, drv_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[6a]"></a>l3g4200dAlign</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_l3g4200d.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_l3g4200d.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>l3g4200dRead</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_l3g4200d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = l3g4200dRead &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_l3g4200d.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>l3g4200dInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_l3g4200d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = l3g4200dInit &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failureMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_l3g4200d.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>mma8452Align</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_mma845x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_mma845x.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>mma8452Read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mma8452Read &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mma845x.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>mma8452Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, drv_mma845x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mma8452Init &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mma845x.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>mpu3050ReadTemp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_mpu3050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu3050ReadTemp &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu3050.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>mpu3050Align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_mpu3050.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu3050.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>mpu3050Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_mpu3050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu3050Read &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu3050.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>mpu3050Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_mpu3050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mpu3050Init &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failureMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu3050.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>mpu6050GyroAlign</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_mpu6050.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu6050.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>mpu6050GyroRead</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu6050GyroRead &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu6050.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>mpu6050GyroInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mpu6050GyroInit &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu6050.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>mpu6050AccAlign</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_mpu6050.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu6050.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>mpu6050AccRead</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mpu6050AccRead &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu6050.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>mpu6050AccInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_mpu6050.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_mpu6050.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>ms5611_calculate</STRONG> (Thumb, 268 bytes, Stack size 36 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ms5611_calculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ms5611.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>ms5611_get_up</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ms5611_get_up &rArr; ms5611_read_adc &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_read_adc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ms5611.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>ms5611_start_up</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ms5611_start_up &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ms5611.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>ms5611_get_ut</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ms5611_get_ut &rArr; ms5611_read_adc &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_read_adc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ms5611.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>ms5611_start_ut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ms5611_start_ut &rArr; i2cWrite &rArr; i2cWriteBuffer &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ms5611.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>ms5611_read_adc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ms5611_read_adc &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_get_ut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611_get_up
</UL>

<P><STRONG><a name="[e9]"></a>ms5611_crc</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms5611_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms5611Detect
</UL>

<P><STRONG><a name="[ea]"></a>pwmTimeBase</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pwmTimeBase &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOutConfig
</UL>

<P><STRONG><a name="[ed]"></a>pwmGPIOConfig</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwmGPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOutConfig
</UL>

<P><STRONG><a name="[ef]"></a>pwmOutConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pwmOutConfig &rArr; pwmOCConfig &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOCConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmGPIOConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmTimeBase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
</UL>

<P><STRONG><a name="[f3]"></a>pwmInConfig</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pwmInConfig &rArr; pwmICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmICConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmGPIOConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmTimeBase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
</UL>

<P><STRONG><a name="[7d]"></a>ppmCallback</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ppmCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>pwmCallback</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwmCallback &rArr; pwmICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmICConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>pwmOCConfig</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pwmOCConfig &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmOutConfig
</UL>

<P><STRONG><a name="[f4]"></a>pwmICConfig</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pwmICConfig &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInConfig
</UL>

<P><STRONG><a name="[107]"></a>cycleCounterInit</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, drv_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cycleCounterInit &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[10c]"></a>uartTxDMA</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>

<P><STRONG><a name="[115]"></a>uart2Open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart2Open &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ChangeBaud
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Init
</UL>

<P><STRONG><a name="[11c]"></a>beep</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beep
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_code
</UL>

<P><STRONG><a name="[11d]"></a>beep_code</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = beep_code &rArr; beep
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
</UL>

<P><STRONG><a name="[121]"></a>i2a</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = i2a &rArr;  i2a (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
</UL>

<P><STRONG><a name="[123]"></a>_atof</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _atof &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
</UL>

<P><STRONG><a name="[129]"></a>ftoa</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ftoa &rArr; itoa &rArr; i2a &rArr;  i2a (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDump
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliPrintVar
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
</UL>

<P><STRONG><a name="[7f]"></a>cliCompare</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cliCompare &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>cliAux</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cliAux &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>cliCMix</STRONG> (Thumb, 806 bytes, Stack size 48 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = cliCMix &rArr;  cliCMix (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixerLoadMix
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliCMix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>cliDefaults</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cliDefaults &rArr; checkFirstTime &rArr; resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstTime
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemReset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>cliPrintVar</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cliPrintVar &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliDump
</UL>

<P><STRONG><a name="[88]"></a>cliDump</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cliDump &rArr; cliPrintVar &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureMask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliPrintVar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliAux
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>cliSave</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cliSave &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemReset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>cliExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cliExit &rArr; cliSave &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliSave
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>cliFeature</STRONG> (Thumb, 674 bytes, Stack size 32 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cliFeature &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFeature
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureMask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;featureClear
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>cliHelp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cliHelp &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>cliMap</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cliMap &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRcChannels
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>cliMixer</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cliMixer &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>cliSet</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cliSet &rArr; _atof &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliPrintVar
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atof
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>cliStatus</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cliStatus &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsMask
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cGetErrorCounter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>cliVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cliVersion &rArr; uartPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>cliPrompt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cliPrompt &rArr; uartPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cliProcess
</UL>

<P><STRONG><a name="[149]"></a>resetConf</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFeature
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRcChannels
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstTime
</UL>

<P><STRONG><a name="[14b]"></a>gpsPrint</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpsPrint &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2TransmitEmpty
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
</UL>

<P><STRONG><a name="[154]"></a>get_D</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_D
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
</UL>

<P><STRONG><a name="[153]"></a>get_I</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
</UL>

<P><STRONG><a name="[14d]"></a>GPS_update_crosstrack</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPS_update_crosstrack &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_18000
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
</UL>

<P><STRONG><a name="[150]"></a>GPS_calc_nav_rate</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPS_calc_nav_rate &rArr; GPS_update_crosstrack &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_P
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_update_crosstrack
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_I
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_D
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[155]"></a>GPS_calc_poshold</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPS_calc_poshold &rArr; get_D
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_P
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_I
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_D
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[163]"></a>GPS_calc_location_error</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_set_next_wp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[156]"></a>GPS_distance_cm_bearing</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPS_distance_cm_bearing &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_set_next_wp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[162]"></a>GPS_calc_velocity</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPS_calc_velocity
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[159]"></a>GPS_calc_longitude_scaling</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPS_calc_longitude_scaling &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_set_next_wp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_home_position
</UL>

<P><STRONG><a name="[15c]"></a>UBLOX_parse_gps</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UBLOX_parse_gps
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_UBLOX_newFrame
</UL>

<P><STRONG><a name="[15b]"></a>GPS_UBLOX_newFrame</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPS_UBLOX_newFrame &rArr; UBLOX_parse_gps
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UBLOX_parse_gps
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[160]"></a>grab_fields</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = grab_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>

<P><STRONG><a name="[15f]"></a>GPS_NMEA_newFrame</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPS_NMEA_newFrame &rArr; GPS_coord_to_degrees
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_coord_to_degrees
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_c
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grab_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[80]"></a>GPS_NewData</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GPS_NewData &rArr; GPS_calc_nav_rate &rArr; GPS_update_crosstrack &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_home_position
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_18000
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_desired_speed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_UBLOX_newFrame
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_velocity
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_distance_cm_bearing
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_location_error
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>GPS_set_pids</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpsInit
</UL>

<P><STRONG><a name="[152]"></a>get_P</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_poshold
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_calc_nav_rate
</UL>

<P><STRONG><a name="[164]"></a>GPS_calc_desired_speed</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NewData
</UL>

<P><STRONG><a name="[161]"></a>hex_c</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_NMEA_newFrame
</UL>

<P><STRONG><a name="[169]"></a>reset_PID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_reset_nav
</UL>

<P><STRONG><a name="[173]"></a>getEstimatedAttitude</STRONG> (Thumb, 900 bytes, Stack size 80 bytes, imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = getEstimatedAttitude &rArr; integratorStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integratorStep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateV
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeIMU
</UL>

<P><STRONG><a name="[81]"></a>_putc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>airplaneMixer</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, mixer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = airplaneMixer
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixTable
</UL>

<P><STRONG><a name="[19d]"></a>uli2a</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uli2a
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[19e]"></a>ui2a</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui2a
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[19c]"></a>putchw</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putchw
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[1a2]"></a>alignSensors</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = alignSensors
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getRawADC
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_getADC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_getADC
</UL>

<P><STRONG><a name="[1a1]"></a>ACC_Common</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ACC_Common &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFeature
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetIntegrator
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_getADC
</UL>

<P><STRONG><a name="[1a6]"></a>GYRO_Common</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GYRO_Common &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_getADC
</UL>

<P><STRONG><a name="[1a7]"></a>Mag_getRawADC</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Mag_getRawADC &rArr; hmc5883lRead &rArr; i2cRead &rArr; i2cInit &rArr; i2cUnstick &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmc5883lRead
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alignSensors
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_getADC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_init
</UL>

<P><STRONG><a name="[1b3]"></a>evaluateCommand</STRONG> (Thumb, 1330 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = evaluateCommand &rArr; checkFirstTime &rArr; resetConf &rArr; writeParams &rArr; blinkLED &rArr; delay &rArr; delayMicroseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeParams
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFirstTime
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensors
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cGetErrorCounter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeNames
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tailSerialReply
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;headSerialReply
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read32
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize8
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize16
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize32
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialCom
</UL>

<P><STRONG><a name="[84]"></a>spektrumDataReceive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spektrum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spektrumDataReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spektrum.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>serializeFrsky</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serializeFrsky
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize16
</UL>

<P><STRONG><a name="[1b6]"></a>sendGPS</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sendGPS &rArr; serialize16 &rArr; serializeFrsky
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize16
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
</UL>

<P><STRONG><a name="[1b7]"></a>sendDataHead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendDataHead
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPS
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
</UL>

<P><STRONG><a name="[1b8]"></a>serialize16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serialize16 &rArr; serializeFrsky
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeFrsky
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPS
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
</UL>

<P><STRONG><a name="[1b9]"></a>sendVoltage</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, telemetry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sendVoltage &rArr; serialize16 &rArr; serializeFrsky
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize16
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTelemetry
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
